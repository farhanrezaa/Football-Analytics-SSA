# Kylian Mbappe
mbappe = player_stats("https://fbref.com/en/players/42fd9c7f/Kylian-Mbappe", '2020-2021')
# Jadon Sancho
sancho = player_stats("https://fbref.com/en/players/dbf053da/Jadon-Sancho", '2020-2021')
# Mo Salah
salah = player_stats("https://fbref.com/en/players/e342ad68/Mohamed-Salah", '2020-2021')
# Sadio Mane
mane = player_stats("https://fbref.com/en/players/c691bfe2/Sadio-Mane", '2020-2021')
player_comparison = bind_rows(mbappe, sancho, salah, mane) %>%
select(xA, Dribble, npxG, key_pass, shoot, pen_touch, xG_xA)
# Radar Chart
areas <- c(rgb(1, 0, 0, 0.25),
rgb(0, 1, 0, 0.25),
rgb(0, 0, 1, 0.25),
rgb(1, 1, 0, 0.35))
radarchart(player_comparison,
title = 'Mbappe vs Sancho vs Salah vs Mane 20/21 Season All Comps',
maxmin = FALSE,
cglty = 1,       # Grid line type
cglcol = "gray", # Grid line color
pcol = 2:4,      # Color for each line
plwd = 2,        # Width for each line
plty = 1,        # Line type for each line
pfcol = areas)
legend("topright",
legend = c('Mbappe', 'Sancho', 'Salah', 'Mane'),
bty = "n", pch = 20, col = areas,
text.col = "grey25", pt.cex = 2)
library(shiny)
library(tidyverse)
library(worldfootballR)
library(dplyr)
library(ggradar)
library(fmsb)
# Function to Copy to Excel/Spreadsheet (Special in OS)
to_clipboard = function(x,sep="\t",col.names=T,...) {
write.table(x
,file = pipe("pbcopy")
,sep=sep
,col.names = col.names
,row.names = F
,quote = F,...)
}
# Define UI
ui <- pageWithSidebar(
# App title ----
headerPanel("Football Analytics"),
# Sidebar panel for inputs ----
sidebarPanel(),
# Main panel for displaying outputs ----
mainPanel()
)
library(shiny)
install.packages('shiny')
library(shiny)
library(shiny)
library(tidyverse)
library(worldfootballR)
library(dplyr)
library(ggradar)
library(fmsb)
# Function to Copy to Excel/Spreadsheet (Special in OS)
to_clipboard = function(x,sep="\t",col.names=T,...) {
write.table(x
,file = pipe("pbcopy")
,sep=sep
,col.names = col.names
,row.names = F
,quote = F,...)
}
# Define UI
ui <- pageWithSidebar(
# App title ----
headerPanel("Football Analytics"),
# Sidebar panel for inputs ----
sidebarPanel(),
# Main panel for displaying outputs ----
mainPanel()
)
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Football Analytics"),
# Sidebar with a slider input for number of bins
sidebarLayout(
textInput("player_link", "Player Link"),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
https://fbref.com/en/players/42fd9c7f/Kylian-Mbappe
https://fbref.com/en/players/42fd9c7f/Kylian-Mbappe
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
?titlePanel
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
?req
?req
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp()
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
library(tidyverse)
library(worldfootballR)
library(dplyr)
library(ggradar)
library(fmsb)
# Function to Copy to Excel/Spreadsheet (Special in OS)
to_clipboard = function(x,sep="\t",col.names=T,...) {
write.table(x
,file = pipe("pbcopy")
,sep=sep
,col.names = col.names
,row.names = F
,quote = F,...)
}
# Load table about detail of each match
xg_data <- get_match_results(country = "ENG", gender = "M", season_end_year = c(2018:2021))
# Get Liverpool Match
liv_match_result = xg_data %>% filter( (Home == 'Liverpool' | Away == 'Liverpool') & !is.na(HomeGoals))
liv_match_result = liv_match_result %>% mutate(point_per_game = case_when(
Home == 'Liverpool' & HomeGoals > AwayGoals ~ 3,
Home == 'Liverpool' & HomeGoals < AwayGoals ~ 0,
Away == 'Liverpool' & HomeGoals > AwayGoals ~ 0,
Away == 'Liverpool' & HomeGoals < AwayGoals ~ 3,
TRUE ~ 1
))
liv_time_series_performance = liv_match_result %>% select(Wk, point_per_game) %>% arrange(Wk)
to_clipboard(liv_time_series_performance)
# XGoals Analysis
liv_match_result = liv_match_result %>% mutate(XG = case_when(
Home == 'Liverpool' ~ Home_xG,
Away == 'Liverpool' ~ Away_xG
))
liv_match_result = liv_match_result %>% mutate(actual_goal = case_when(
Home == 'Liverpool' ~ HomeGoals,
Away == 'Liverpool' ~ AwayGoals
))
liv_match_result = liv_match_result %>% mutate(XGA = case_when(
Home == 'Liverpool' ~ Away_xG,
Away == 'Liverpool' ~ Home_xG
))
liv_match_result = liv_match_result %>% mutate(actual_GA = case_when(
Home == 'Liverpool' ~ AwayGoals,
Away == 'Liverpool' ~ HomeGoals
))
xgoals_analysis = liv_match_result %>% select(Season_End_Year, Wk, XG, actual_goal, XGA, actual_GA)
to_clipboard(xgoals_analysis)
# Function to Call Player Statistics in a Season
player_stats = function(player_url, season){
passing_stats = fb_player_season_stats(player_url, stat_type = 'passing') %>%
select(player_name, Season, Comp, Att_Total, Cmp_Total, Att_Long, Cmp_Long,
Final_Third, KP, Prog)
standard_stats = fb_player_season_stats(player_url, stat_type = 'standard') %>%
mutate(goals_plus_assist = Gls + Ast,
xG_plus_xA = xG_Expected + xA_Expected) %>%
select(player_name, Season, Comp, Min_Time, Gls, Ast, goals_plus_assist, xG_plus_xA,
xG_Expected, xA_Expected, npxG_Expected)
shooting_stats = fb_player_season_stats(player_url, stat_type = 'shooting') %>%
select(player_name, Season, Comp, Sh_Standard, SoT_Standard,)
defense_stats = fb_player_season_stats(player_url, stat_type = 'defense')
names(defense_stats)[13] = 'att_3rd_tackle'
names(defense_stats)[22] = 'mid_3rd_pressure'
names(defense_stats)[23] = 'att_3rd_pressure'
defense_stats = defense_stats %>%
select(player_name, Season, Comp, Tkl_Tackles, TklW_Tackles, Press_Pressures, Succ_Pressures,
att_3rd_tackle, mid_3rd_pressure, att_3rd_pressure, Int, Clr)
possession_stats = fb_player_season_stats(player_url, stat_type = 'possession')
names(possession_stats)[13] = 'att_3rd_touches'
names(possession_stats)[14] = 'att_pen_touches'
possession_stats = possession_stats %>%
select(player_name, Season, Comp, att_3rd_touches, att_pen_touches, Att_Dribbles,
Succ_Dribbles)
misc_stats = fb_player_season_stats(player_url, stat_type = 'misc') %>%
select(player_name, Season, Comp, Recov, Won_Aerial_Duels, Lost_Aerial_Duels)
player_summary_stats = full_join(passing_stats, standard_stats,
by = c('player_name', 'Season', 'Comp')) %>%
full_join(shooting_stats, by = c('player_name', 'Season', 'Comp')) %>%
full_join(defense_stats, by = c('player_name', 'Season', 'Comp')) %>%
full_join(possession_stats, by = c('player_name', 'Season', 'Comp')) %>%
full_join(misc_stats, by = c('player_name', 'Season', 'Comp'))
# Column Order
col_order = c('player_name', 'Season', 'Comp', 'Min_Time', 'Att_Total', 'Cmp_Total',
'Att_Long', 'Cmp_Long', 'Att_Dribbles', 'Succ_Dribbles', 'xA_Expected', 'Ast',
'xG_Expected', 'npxG_Expected', 'Gls', 'xG_plus_xA', 'goals_plus_assist',
'KP', 'Prog', 'Sh_Standard', 'SoT_Standard', 'Tkl_Tackles', 'TklW_Tackles',
'Press_Pressures', 'Succ_Pressures', 'att_3rd_tackle', 'mid_3rd_pressure',
'att_3rd_pressure', 'Int', 'Clr', 'att_3rd_touches', 'att_pen_touches',
'Recov', 'Won_Aerial_Duels', 'Lost_Aerial_Duels')
player_summary_stats = player_summary_stats[, col_order] %>% arrange(Season, Comp)
player_summary_stats = player_summary_stats %>%
filter(Season == season) %>%
select(player_name, Comp, Min_Time,
xA_Expected, Att_Dribbles, npxG_Expected,
KP, Sh_Standard, att_pen_touches, xG_plus_xA) %>%
group_by(player_name) %>%
summarise(total_minute = sum(Min_Time, na.rm = TRUE),
xA = sum(xA_Expected, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
Dribble = sum(Att_Dribbles, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
npxG = sum(npxG_Expected, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
key_pass = sum(KP, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
shoot = sum(Sh_Standard, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
pen_touch = sum(att_pen_touches, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
xG_xA = sum(xG_plus_xA, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE))
}
# Function to Call Player Statistics in a Season
player_stats = function(player_url, season){
passing_stats = fb_player_season_stats(player_url, stat_type = 'passing') %>%
select(player_name, Season, Comp, Att_Total, Cmp_Total, Att_Long, Cmp_Long,
Final_Third, KP, Prog)
standard_stats = fb_player_season_stats(player_url, stat_type = 'standard') %>%
mutate(goals_plus_assist = Gls + Ast,
xG_plus_xA = xG_Expected + xA_Expected) %>%
select(player_name, Season, Comp, Min_Time, Gls, Ast, goals_plus_assist, xG_plus_xA,
xG_Expected, xA_Expected, npxG_Expected)
shooting_stats = fb_player_season_stats(player_url, stat_type = 'shooting') %>%
select(player_name, Season, Comp, Sh_Standard, SoT_Standard,)
defense_stats = fb_player_season_stats(player_url, stat_type = 'defense')
names(defense_stats)[13] = 'att_3rd_tackle'
names(defense_stats)[22] = 'mid_3rd_pressure'
names(defense_stats)[23] = 'att_3rd_pressure'
defense_stats = defense_stats %>%
select(player_name, Season, Comp, Tkl_Tackles, TklW_Tackles, Press_Pressures, Succ_Pressures,
att_3rd_tackle, mid_3rd_pressure, att_3rd_pressure, Int, Clr)
possession_stats = fb_player_season_stats(player_url, stat_type = 'possession')
names(possession_stats)[13] = 'att_3rd_touches'
names(possession_stats)[14] = 'att_pen_touches'
possession_stats = possession_stats %>%
select(player_name, Season, Comp, att_3rd_touches, att_pen_touches, Att_Dribbles,
Succ_Dribbles)
misc_stats = fb_player_season_stats(player_url, stat_type = 'misc') %>%
select(player_name, Season, Comp, Recov, Won_Aerial_Duels, Lost_Aerial_Duels)
player_summary_stats = full_join(passing_stats, standard_stats,
by = c('player_name', 'Season', 'Comp')) %>%
full_join(shooting_stats, by = c('player_name', 'Season', 'Comp')) %>%
full_join(defense_stats, by = c('player_name', 'Season', 'Comp')) %>%
full_join(possession_stats, by = c('player_name', 'Season', 'Comp')) %>%
full_join(misc_stats, by = c('player_name', 'Season', 'Comp'))
# Column Order
col_order = c('player_name', 'Season', 'Comp', 'Min_Time', 'Att_Total', 'Cmp_Total',
'Att_Long', 'Cmp_Long', 'Att_Dribbles', 'Succ_Dribbles', 'xA_Expected', 'Ast',
'xG_Expected', 'npxG_Expected', 'Gls', 'xG_plus_xA', 'goals_plus_assist',
'KP', 'Prog', 'Sh_Standard', 'SoT_Standard', 'Tkl_Tackles', 'TklW_Tackles',
'Press_Pressures', 'Succ_Pressures', 'att_3rd_tackle', 'mid_3rd_pressure',
'att_3rd_pressure', 'Int', 'Clr', 'att_3rd_touches', 'att_pen_touches',
'Recov', 'Won_Aerial_Duels', 'Lost_Aerial_Duels')
player_summary_stats = player_summary_stats[, col_order] %>% arrange(Season, Comp)
player_summary_stats = player_summary_stats %>%
filter(Season == season) %>%
select(player_name, Comp, Min_Time,
xA_Expected, Att_Dribbles, npxG_Expected, Gls, Ast,
KP, Sh_Standard, att_pen_touches, xG_plus_xA) %>%
group_by(player_name) %>%
summarise(total_minute = sum(Min_Time, na.rm = TRUE),
xA = sum(xA_Expected, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
Dribble = sum(Att_Dribbles, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
npxG = sum(npxG_Expected, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
key_pass = sum(KP, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
shoot = sum(Sh_Standard, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
pen_touch = sum(att_pen_touches, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
xG_xA = sum(xG_plus_xA, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE))
}
werner_17 = player_stats("https://fbref.com/en/players/42fd9c7f/Kylian-Mbappe", '2017-2018')
werner_17 = player_stats("https://fbref.com/en/players/49fe9070/Timo-Werner", '2017-2018')
werner_18 = player_stats("https://fbref.com/en/players/49fe9070/Timo-Werner", '2018-2019')
werner_19 = player_stats("https://fbref.com/en/players/49fe9070/Timo-Werner", '2019-2020')
werner_20 = player_stats("https://fbref.com/en/players/49fe9070/Timo-Werner", '2020-2021')
fb_player_season_stats(player_url, stat_type = 'standard')
fb_player_season_stats("https://fbref.com/en/players/42fd9c7f/Kylian-Mbappe", stat_type = 'standard')
tes = fb_player_season_stats("https://fbref.com/en/players/42fd9c7f/Kylian-Mbappe", stat_type = 'standard')
View(tes)
# Function to Call Player Statistics in a Season
player_stats = function(player_url, season){
passing_stats = fb_player_season_stats(player_url, stat_type = 'passing') %>%
select(player_name, Season, Comp, Att_Total, Cmp_Total, Att_Long, Cmp_Long,
Final_Third, KP, Prog)
standard_stats = fb_player_season_stats(player_url, stat_type = 'standard') %>%
mutate(goals_plus_assist = G_minus_PK + Ast,
xG_plus_xA = xG_Expected + xA_Expected) %>%
select(player_name, Season, Comp, Min_Time, G_minus_PK, Ast, goals_plus_assist, xG_plus_xA,
xG_Expected, xA_Expected, npxG_Expected)
shooting_stats = fb_player_season_stats(player_url, stat_type = 'shooting') %>%
select(player_name, Season, Comp, Sh_Standard, SoT_Standard,)
defense_stats = fb_player_season_stats(player_url, stat_type = 'defense')
names(defense_stats)[13] = 'att_3rd_tackle'
names(defense_stats)[22] = 'mid_3rd_pressure'
names(defense_stats)[23] = 'att_3rd_pressure'
defense_stats = defense_stats %>%
select(player_name, Season, Comp, Tkl_Tackles, TklW_Tackles, Press_Pressures, Succ_Pressures,
att_3rd_tackle, mid_3rd_pressure, att_3rd_pressure, Int, Clr)
possession_stats = fb_player_season_stats(player_url, stat_type = 'possession')
names(possession_stats)[13] = 'att_3rd_touches'
names(possession_stats)[14] = 'att_pen_touches'
possession_stats = possession_stats %>%
select(player_name, Season, Comp, att_3rd_touches, att_pen_touches, Att_Dribbles,
Succ_Dribbles)
misc_stats = fb_player_season_stats(player_url, stat_type = 'misc') %>%
select(player_name, Season, Comp, Recov, Won_Aerial_Duels, Lost_Aerial_Duels)
player_summary_stats = full_join(passing_stats, standard_stats,
by = c('player_name', 'Season', 'Comp')) %>%
full_join(shooting_stats, by = c('player_name', 'Season', 'Comp')) %>%
full_join(defense_stats, by = c('player_name', 'Season', 'Comp')) %>%
full_join(possession_stats, by = c('player_name', 'Season', 'Comp')) %>%
full_join(misc_stats, by = c('player_name', 'Season', 'Comp'))
# Column Order
col_order = c('player_name', 'Season', 'Comp', 'Min_Time', 'Att_Total', 'Cmp_Total',
'Att_Long', 'Cmp_Long', 'Att_Dribbles', 'Succ_Dribbles', 'xA_Expected', 'Ast',
'xG_Expected', 'npxG_Expected', 'G_minus_PK', 'xG_plus_xA', 'goals_plus_assist',
'KP', 'Prog', 'Sh_Standard', 'SoT_Standard', 'Tkl_Tackles', 'TklW_Tackles',
'Press_Pressures', 'Succ_Pressures', 'att_3rd_tackle', 'mid_3rd_pressure',
'att_3rd_pressure', 'Int', 'Clr', 'att_3rd_touches', 'att_pen_touches',
'Recov', 'Won_Aerial_Duels', 'Lost_Aerial_Duels')
player_summary_stats = player_summary_stats[, col_order] %>% arrange(Season, Comp)
player_summary_stats = player_summary_stats %>%
filter(Season == season) %>%
select(player_name, Comp, Min_Time,
xA_Expected, Att_Dribbles, npxG_Expected, G_minus_PK, Ast,
KP, Sh_Standard, att_pen_touches, xG_plus_xA) %>%
group_by(player_name) %>%
summarise(total_minute = sum(Min_Time, na.rm = TRUE),
npGoal = sum(G_minus_PK, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
xA = sum(xA_Expected, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
Dribble = sum(Att_Dribbles, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
npxG = sum(npxG_Expected, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
key_pass = sum(KP, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
shoot = sum(Sh_Standard, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
pen_touch = sum(att_pen_touches, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE),
xG_xA = sum(xG_plus_xA, na.rm = TRUE)*90/sum(Min_Time, na.rm = TRUE))
}
werner_17 = player_stats("https://fbref.com/en/players/49fe9070/Timo-Werner", '2017-2018')
werner_18 = player_stats("https://fbref.com/en/players/49fe9070/Timo-Werner", '2018-2019')
werner_19 = player_stats("https://fbref.com/en/players/49fe9070/Timo-Werner", '2019-2020')
werner_20 = player_stats("https://fbref.com/en/players/49fe9070/Timo-Werner", '2020-2021')
View(werner_20)
View(werner_20)
werner_comparison = bind_rows(werner_17, werner_18, werner_19, werner_20) %>%
select(npGoal, xA, Dribble, npxG, key_pass, shoot, pen_touch, xG_xA)
to_clipboard(werner_comparison)
werner_16 = player_stats("https://fbref.com/en/players/49fe9070/Timo-Werner", '2016-2017')
werner_15 = player_stats("https://fbref.com/en/players/49fe9070/Timo-Werner", '2015-2016')
werner_comparison = bind_rows(werner_15, werner_16, werner_17, werner_18, werner_19, werner_20) %>%
select(npGoal, xA, Dribble, npxG, key_pass, shoot, pen_touch, xG_xA)
to_clipboard(werner_comparison)
View(werner_17)
View(werner_18)
View(werner_19)
View(werner_20)
View(werner_comparison)
werner_comparison = bind_rows(werner_15, werner_16, werner_17, werner_18, werner_19, werner_20) %>%
select(xA, Dribble, npxG, key_pass, shoot, pen_touch, xG_xA)
# Create Radar Chart for Comparing Players
areas <- c(rgb(1, 0, 0, 0.25),
rgb(0, 1, 0, 0.25),
rgb(0, 0, 1, 0.25),
rgb(1, 1, 0, 0.35))
werner_comparison = bind_rows(werner_17, werner_18, werner_19, werner_20) %>%
select(xA, Dribble, npxG, key_pass, shoot, pen_touch, xG_xA)
# Create Radar Chart for Comparing Players
areas <- c(rgb(1, 0, 0, 0.25),
rgb(0, 1, 0, 0.25),
rgb(0, 0, 1, 0.25),
rgb(1, 1, 0, 0.35))
radarchart(werner_comparison,
title = 'Timo Werner Last 4 Season',
maxmin = FALSE,
cglty = 1,       # Grid line type
cglcol = "gray", # Grid line color
pcol = 2:4,      # Color for each line
plwd = 2,        # Width for each line
plty = 1,        # Line type for each line
pfcol = areas)
legend("topright",
legend = c('2017/2018', '2018/2019', '2019/2020', '2020/2021'),
bty = "n", pch = 20, col = areas,
text.col = "grey25", pt.cex = 2)
shiny::runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
fb_player_season_stats("https://fbref.com/en/players/42fd9c7f/Kylian-Mbappe", stat_type = 'passing')
passing_stats = fb_player_season_stats("https://fbref.com/en/players/42fd9c7f/Kylian-Mbappe", stat_type = 'passing') %>%
select(player_name, Season, Comp, Att_Total, Cmp_Total, Att_Long, Cmp_Long,
Final_Third, KP, Prog)
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp()
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
fb_player_season_stats("https://fbref.com/en/players/42fd9c7f/Kylian-Mbappe", stat_type = 'defense')
defence_stats = fb_player_season_stats("https://fbref.com/en/players/42fd9c7f/Kylian-Mbappe", stat_type = 'defense')
names(defence_stats)
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
names(defence_stats)
defence_stats = fb_player_season_stats("https://fbref.com/en/players/42fd9c7f/Kylian-Mbappe", stat_type = 'possession')
names(defence_stats)
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
devtools::install_github("business-science/anomalize")
library(anomalize)
library(tidyverse)
library(coindeskr)
install.packages("coindeskr")
library(coindeskr)
btc <- get_historic_price(start = "2017-01-01")
shiny::runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
install.packages(c("bigrquery", "shinycssloaders"))
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
runApp('Documents/GitHub/Football-Analytics-SSA/football_analytics')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='farhanreezaa', token='8FF9DD3AFAEB7168A29A783FAA90983D', secret='ON9opHcnYuQC6k1A6EQAwO1VtM76KoMvxxnFUwEY')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
setwd("~/Documents/GitHub/Football-Analytics-SSA/football_analytics")
library(rsconnect)
rsconnect::deployApp('~/Documents/GitHub/Football-Analytics-SSA/football_analytics')
